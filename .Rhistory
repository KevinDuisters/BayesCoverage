regimeL[i] <- out.L$regime
}
if(output=="LU"){
theta0seq <- c(seq(-lambda-20,-lambda-h,h),seq(lambda+h,lambda+20,h))
xU.inf <- sapply(theta0seq,function(theta0){xgrid[min(which(Ugrid>=theta0))]})
xU.sup <- sapply(theta0seq,function(theta0){xgrid[max(which(Ugrid<=theta0))]})
xL.inf <- sapply(theta0seq,function(theta0){xgrid[min(which(Lgrid>=theta0))]})
xL.sup <-sapply(theta0seq,function(theta0){xgrid[max(which(Lgrid<=theta0))]})
plot(xgrid,xgrid,ylab=expression(paste(L[alpha](x)," and ",U[alpha](x))),xlab=expression(x),type="n",xlim=ranges,ylim=1.5*ranges,cex.lab=cx)
abline(h=c(-lambda,lambda),lty=3,col="darkgrey")
ta <-max(0,xgrid[((w/(1-w))*(plaplace(xgrid - lambda) + plaplace(-xgrid - lambda))/dlaplace(xgrid)) <= (alpha/(1-alpha))])
if(ta==0){ # this is a manual trick, not exact
abline(v=c(max(xgrid[regimeU==5]),max(xgrid[regimeU==4]),min(xgrid[regimeU==2]),min(xgrid[regimeU==1])),lty=3,col="darkgrey")
mtext(c("I","IV","III","II","I"),side=1,adj=0.5,line=-1.5,at=c((min(ranges)+max(xgrid[regimeU==5]))/2,(max(xgrid[regimeU==5])+max(xgrid[regimeU==4]))/2,(max(xgrid[regimeU==4])+min(xgrid[regimeU==2]))/2,(min(xgrid[regimeU==2])+min(xgrid[regimeU==1]))/2,(min(xgrid[regimeU==1])+max(ranges))/2),cex=cx)
}else{
abline(v=c(max(xgrid[regimeU==5]),-ta,ta,min(xgrid[regimeU==1])),lty=3,col="darkgrey")
mtext(c("I","IV","","II","I"),side=1,adj=0.5,line=-1.5,at=c((min(ranges)+max(xgrid[regimeU==5]))/2,(max(xgrid[regimeU==5])-ta)/2,(-ta+ta)/2,(ta+min(xgrid[regimeU==1]))/2,(min(xgrid[regimeU==1])+max(ranges))/2),cex=cx)
mtext(c(expression(-t[alpha]),expression(t[alpha])),side=1,at=c(-ta,ta),line=1,cex=cx)
}
for(r in 0:5){
reg <- which(regimeU==r)
lines(xgrid[reg],Ugrid[reg],col=cols[r])
reg <- which(regimeL==r)
lines(xgrid[reg],Lgrid[reg],col=cols[r],lty=2)
}
mtext(c(expression(-lambda),expression(lambda)),line=-1.5,side=2,at=c(-lambda,lambda),cex=cx)
legend("topleft",c(expression(U[alpha]),expression(L[alpha])),lty=c(1,2),col=c("black","black"),horiz=F,bg="white",box.col="white",seg.len=2,cex=cx)
box()
title(bquote(paste("Laplace(0,1), ",lambda==.(lambda),", ",w==.(w))))
}
if(output=="size"){
plot(xgrid,xgrid,type="n",xlab="x",ylab=expression(paste("length of ",HPD[alpha](x))),xlim=ranges,ylim=c(0,2*qlaplace(1-alpha/2)),cex.lab=cx)
abline(h=2*qlaplace(1-alpha/2),lty=2,col="red")
ta <-max(0,xgrid[((w/(1-w))*(plaplace(xgrid - lambda) + plaplace(-xgrid - lambda))/dlaplace(xgrid)) <= (alpha/(1-alpha))])
if(ta==0){ # this is a manual trick, not exact
abline(v=c(max(xgrid[regimeU==5]),max(xgrid[regimeU==4]),min(xgrid[regimeU==2]),min(xgrid[regimeU==1])),lty=3,col="darkgrey")
mtext(c("I","IV","III","II","I"),side=1,adj=0.5,line=-1.5,at=c((min(ranges)+max(xgrid[regimeU==5]))/2,(max(xgrid[regimeU==5])+max(xgrid[regimeU==4]))/2,(max(xgrid[regimeU==4])+min(xgrid[regimeU==2]))/2,(min(xgrid[regimeU==2])+min(xgrid[regimeU==1]))/2,(min(xgrid[regimeU==1])+max(ranges))/2),cex=cx)
}else{
abline(v=c(max(xgrid[regimeU==5]),-ta,ta,min(xgrid[regimeU==1])),lty=3,col="darkgrey")
mtext(c("I","IV","","II","I"),side=1,adj=0.5,line=-1.5,at=c((min(ranges)+max(xgrid[regimeU==5]))/2,(max(xgrid[regimeU==5])-ta)/2,(-ta+ta)/2,(ta+min(xgrid[regimeU==1]))/2,(min(xgrid[regimeU==1])+max(ranges))/2),cex=cx)
mtext(c(expression(-t[alpha]),expression(t[alpha])),side=1,at=c(-ta,ta),line=1,cex=cx)
}
sizes <- numeric(length(xgrid))
for(i in 1:length(xgrid)){
Ui <- Ugrid[i]
Li <- Lgrid[i]
if(Ui > lambda & Li < (-lambda) ){sizes[i] <- Ui - Li - 2*lambda}else{
sizes[i] <- Ui - Li
}
}
lines(xgrid,sizes)
title(bquote(paste("Laplace(0,1), ",lambda==.(lambda),", ",w==.(w))))
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Visualize LU
pdf("Figures/figLU.pdf",width=12,height=4.5)
#png("Figures/figLU.png",width=12,height=4.5,unit="in",res=300)
par(mfrow=c(1,3))
code.chunk(lambda=0.5,w=0.25,alpha,output="LU") # left
code.chunk(lambda=5,w=0.25,alpha,output="LU") # mid
code.chunk(lambda=5,w=1,alpha,output="LU") # right
dev.off()
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
# Visualize LU
pdf("Figures/figsize.pdf",width=12,height=4.5)
#png("Figures/figsize.png",width=12,height=4.5,unit="in",res=300)
par(mfrow=c(1,3))
code.chunk(lambda=0.5,w=0.25,alpha,output="size") # left
code.chunk(lambda=5,w=0.25,alpha,output="size") # mid
code.chunk(lambda=5,w=1,alpha,output="size") # right
dev.off()
#------------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Feb 2020
#--------------------------------------------------------------------------------------------------------------------#
# Source functions
source("functions/post.R")
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Settings
lambda <- 0.5
w <- 0.2
dist <- "Normal"
distname <- "N(0,1)"
alpha <- 0.05
xl<-7
ranges <- c(-xl,xl)
x <- 1.25
thetaseq <- c(seq(-xl,-lambda-0.005,0.005),seq(lambda+0.005,xl,0.005))
sub1 <- thetaseq<(-lambda)
sub2 <- thetaseq>=(-lambda) & thetaseq <= lambda
sub3 <- thetaseq>lambda
#--------------------------------------------------------------------------------------------------------------------#
# plot
pdf("Figures/figIntro.pdf",width=12,height=9)
#png("Figures/figIntro.png",width=12,height=9,units="in",res=300)
par(mfcol=c(2,3))
for(w in c(1,0.25)){
if(w==1){ylw <- "Density"}else{ylw <- "Density*"}
plot(0,0,type="n",ylim=c(0,0.7),xlim=c(-xl,xl),xaxt="s",yaxt="n",xlab=expression(theta),ylab=ylw)
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
abline(v=c(-lambda,lambda),lty=3,col="grey")
mtext(c(expression(-lambda),expression(lambda)),line=1,side=1,at=c(-lambda,lambda))
arrows(-xl,w*1/(6-2*lambda),-lambda,w*1/(6-2*lambda),lwd=1,angle=15,length=0.10,code=1)
arrows(lambda,w*1/(6-2*lambda),xl,w*1/(6-2*lambda),lwd=1,angle=15,length=0.10,code=2)
segments(-lambda,0,lambda,0,lwd=1.5)
#points(c(-lambda,lambda),rep(0,2),pch=21,bg=1)
#points(c(-lambda,lambda),rep(w*1/(6-2*lambda),2),pch=21,bg="white")
if(w==0.25){
arrows(x0=0,x1=0,y0=0,y1=0.65,lwd=3,angle=15,length=0.10) # this 0.65 is arbitrary
text(x=0.5,y=0.65,expression(paste(P,"(",theta,"=0) = 1-w")),adj=0)
text(x=3,y=0.08,expression(paste(pi,"(",theta,")")),adj=0)
}
if(w==1){text(x=3,y=0.17,expression(paste(pi,"(",theta,")")),adj=0)}
}
# middle
for(w in c(1,0.25)){
if(w==1){ylw <- "Density"}else{ylw <- "Density*"}
plot(0,0,type="n",ylim=c(0,0.7),xlim=c(-xl,xl),xaxt="s",yaxt="n",xlab=expression(theta),ylab=ylw)
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
abline(v=c(-lambda,lambda),lty=3,col="grey")
mtext(c(expression(-lambda),expression(lambda)),line=1,side=1,at=c(-lambda,lambda))
polygon(c(-lambda,seq(-lambda,lambda,0.01),lambda,-lambda),c(0,dnorm(seq(-lambda,lambda,0.01)-x),0,0),col="grey",density=20,border=NA)
segments(x0=c(-lambda,lambda),x1=c(-lambda,lambda),y0=c(0,0),y1=c(dnorm(-lambda-x),dnorm(lambda-x)),col="grey")
lines(seq(-xl,xl,0.01),dnorm(x-seq(-xl,xl,0.01)),lty=2)
segments(-lambda,x1=lambda,y0=0,lwd=1.5,col="black")
lines(thetaseq[sub1],sapply(thetaseq[sub1],function(t)post(t,x=x,lambda,w,dist)),col="black",lwd=1)
lines(thetaseq[sub2],sapply(thetaseq[sub2],function(t)post(t,x=x,lambda,w,dist)),col="black",lwd=1)
lines(thetaseq[sub3],sapply(thetaseq[sub3],function(t)post(t,x=x,lambda,w,dist)),col="black",lwd=1)
#points(c(-lambda,lambda),rep(0,2),pch=21,bg="black",col="black")
#points(c(-lambda,lambda),c(post(-lambda-1e-6,x,lambda,w,dist),post(lambda+1e-6,x,lambda,w,dist)),pch=21,bg="white",col="black")
if(w==1){
text(x=2.45,y=0.4,expression(paste(pi,"(",theta,"|X=x)")),adj=0,col="black")
text(x=1.3,y=0.12,expression(paste("g(x-",theta,")")),adj=0)
}
if(w==0.25){
arrows(x0=0,x1=0,y0=0,y1=0.65,lwd=3,angle=15,length=0.10,col="black")
text(x=0.5,y=0.65,expression(paste(P,"(",theta,"=0|X=x)")),adj=0,col="black")
text(x=1.9,y=0.4,expression(paste("g(x-",theta,")")),adj=0)
text(x=1,y=0.07,expression(paste(pi,"(",theta,"|X=x)")),adj=0,col="black")
}
polygon(c(-4,-3.5,-3.5,-4,-4),c(0.275,0.275,0.325,0.325,0.275),col="grey",density=20)
text(x=-3.25,y=0.3,expression(Delta[lambda](x)),adj=0)
}
# bottom
for(w in c(1,0.25)){
coverage(alpha,lambda,w,dist="Normal",thetamax=xl,h=0.001,plot.cov=T,plot.cov.title=T,plot.neg=T,line.col="black")
if(w<1){points(0,1,pch=16) # theta_0 = 0 always covered since 0 always in HPD for w<1}
}
}
dev.off()
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Feb 2020
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# source functions
library(rmutil) #dlaplace
#--------------------------------------------------------------------------------------------------------------------#
# Plots
#--------------------------------------------------------------------------------------------------------------------#
# Fig: Visualize R functions
dist <- "Lap"
# localize g and G functions
if(dist=="Lap"){
g <- function(x,theta0=0){dlaplace(x,m=theta0,s=1)}
G <- function(x,theta0=0){plaplace(x,m=theta0,s=1)}
Ginv <- function(p){qlaplace(p)}
distname <- "Laplace(0,1)"
}
#--------------------------------------------------------------------------------------------------------------------#
# R functions
R1f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)-((1-alpha)/2)*(G(lambda-x)-G(-lambda-x)))))}
R2f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha - (1-w)/w*alpha*g(x)+alpha*(G(lambda-x)-G(-lambda-x)) + G(-lambda-x))))}
R3f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)+(alpha/2)*(G(lambda-x)-G(-lambda-x)))))}
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# codechunk for plotting
code.chunk <- function(lambda,alpha,w,distname,h=0.0001){
xgrid <- seq(0,15,h)
ranges <- c(0,10)
# get R
R1 <- R1f(xgrid,alpha,w,lambda)
R2 <- R2f(xgrid,alpha,w,lambda)
R3 <- R3f(xgrid,alpha,w,lambda)
plot(xgrid,xgrid,type="n",xlab="x",ylab="R",xlim=ranges,ylim=c(0,10))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
X1 <- xgrid[xgrid > lambda + R1]
X2 <- xgrid[(xgrid > 0) & (-lambda + R3 < xgrid) & (xgrid <= lambda + R1)  ]
X3 <- xgrid[abs(xgrid) <= -lambda + R3]
X4 <- -X2
X5 <- -X1
# exclude |x| <= t_alpha
ta <-max(0,xgrid[((w/(1-w))*(G(xgrid - lambda) + G(-xgrid - lambda))/g(xgrid)) <= (alpha/(1-alpha))])
if(ta==0){ # this is a manual trick, not exact
#abline(v=c(max(X5),max(X4),min(X2),min(X1)),lty=3,col="darkgrey")
#mtext(c("I","IV","III","II","I"),side=1,adj=0.5,line=-1.5,at=c((min(ranges)+max(X5))/2,(max(X5)+max(X4))/2,(max(X4)+min(X2))/2,(min(X2)+min(X1))/2,(min(X1)+max(ranges))/2))
abline(v=c(min(X2),min(X1)),lty=3,col="darkgrey")
mtext(c("III","II","I"),side=1,adj=0.5,line=-1.5,at=c((max(X4)+min(X2))/2,(min(X2)+min(X1))/2,(min(X1)+max(ranges))/2))
}else{
# abline(v=c(max(X5),-ta,ta,min(X1)),lty=3,col="darkgrey")
# mtext(c("I","IV","-","II","I"),side=1,adj=0.5,line=-1.5,at=c((min(ranges)+max(X5))/2,(max(X5)-ta)/2,(-ta+ta)/2,(ta+min(X1))/2,(min(X1)+max(ranges))/2))
# mtext(c(expression(-t[alpha]),expression(t[alpha])),side=1,at=c(-ta,ta),line=1)
abline(v=c(ta,min(X1)),lty=3,col="darkgrey")
mtext(c("-","II","I"),side=1,adj=0.5,line=-1.5,at=c((-ta+ta)/2,(ta+min(X1))/2,(min(X1)+max(ranges))/2))
mtext(c(expression(t[alpha])),side=1,at=c(ta),line=1)
}
lines(xgrid,R1,col="green",lty=2)
lines(xgrid,R2,col="red",lty=2)
lines(xgrid,R3,col="blue",lty=2)
# Active x in regime
lines(X1[abs(X1)>ta],R1f(X1[abs(X1)>ta],alpha,w,lambda),col="green",lty=1)
lines(X2[abs(X2)>ta],R2f(X2[abs(X2)>ta],alpha,w,lambda),col="red",lty=1)
lines(X3[abs(X3)>ta],R3f(X3[abs(X3)>ta],alpha,w,lambda),col="blue",lty=1)
}
# note, could use this code to generate L,U figures as well (replace getU function). Gives the same results.
par(mfrow=c(1,3)) # this is a trick to get the size exactly the same as figLU
plot.new()
code.chunk(lambda=5,alpha=0.05,w=1,distname) # the actual figure
plot.new()
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Feb 2020
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# source functions
library(rmutil) #dlaplace
#--------------------------------------------------------------------------------------------------------------------#
# Plots
#--------------------------------------------------------------------------------------------------------------------#
# Fig: Visualize R functions
dist <- "Lap"
# localize g and G functions
if(dist=="Lap"){
g <- function(x,theta0=0){dlaplace(x,m=theta0,s=1)}
G <- function(x,theta0=0){plaplace(x,m=theta0,s=1)}
Ginv <- function(p){qlaplace(p)}
distname <- "Laplace(0,1)"
}
#--------------------------------------------------------------------------------------------------------------------#
# R functions
R1f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)-((1-alpha)/2)*(G(lambda-x)-G(-lambda-x)))))}
R2f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha - (1-w)/w*alpha*g(x)+alpha*(G(lambda-x)-G(-lambda-x)) + G(-lambda-x))))}
R3f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)+(alpha/2)*(G(lambda-x)-G(-lambda-x)))))}
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# codechunk for plotting
code.chunk <- function(lambda,alpha,w,distname,h=0.0001){
xgrid <- seq(0,15,h)
ranges <- c(0,10)
# get R
R1 <- R1f(xgrid,alpha,w,lambda)
R2 <- R2f(xgrid,alpha,w,lambda)
R3 <- R3f(xgrid,alpha,w,lambda)
plot(xgrid,xgrid,type="n",xlab="x",ylab="R",xlim=ranges,ylim=c(0,10))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
X1 <- xgrid[xgrid > lambda + R1]
X2 <- xgrid[(xgrid > 0) & (-lambda + R3 < xgrid) & (xgrid <= lambda + R1)  ]
X3 <- xgrid[abs(xgrid) <= -lambda + R3]
X4 <- -X2
X5 <- -X1
# exclude |x| <= t_alpha
ta <-max(0,xgrid[((w/(1-w))*(G(xgrid - lambda) + G(-xgrid - lambda))/g(xgrid)) <= (alpha/(1-alpha))])
if(ta==0){ # this is a manual trick, not exact
abline(v=c(min(X2),min(X1)),lty=3,col="darkgrey")
mtext(c("III","II","I"),side=1,adj=0.5,line=-1.5,at=c((max(X4)+min(X2))/2,(min(X2)+min(X1))/2,(min(X1)+max(ranges))/2))
}else{
abline(v=c(ta,min(X1)),lty=3,col="darkgrey")
mtext(c("-","II","I"),side=1,adj=0.5,line=-1.5,at=c((-ta+ta)/2,(ta+min(X1))/2,(min(X1)+max(ranges))/2))
mtext(c(expression(t[alpha])),side=1,at=c(ta),line=1)
}
lines(xgrid,R1,col="green",lty=2)
lines(xgrid,R2,col="red",lty=2)
lines(xgrid,R3,col="blue",lty=2)
# Active x in regime
lines(X1[abs(X1)>ta],R1f(X1[abs(X1)>ta],alpha,w,lambda),col="green",lty=1)
lines(X2[abs(X2)>ta],R2f(X2[abs(X2)>ta],alpha,w,lambda),col="red",lty=1)
lines(X3[abs(X3)>ta],R3f(X3[abs(X3)>ta],alpha,w,lambda),col="blue",lty=1)
}
par(mfrow=c(1,3)) # this is a trick to get the size exactly the same as figLU
plot.new()
code.chunk(lambda=5,alpha=0.05,w=1,distname) # the actual figure
setwd("~/surfdrive/Confidence (KD)/Git")
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Feb 2020
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# source functions
library(rmutil) #dlaplace
#--------------------------------------------------------------------------------------------------------------------#
# Plots
#--------------------------------------------------------------------------------------------------------------------#
# Fig: Visualize R functions
dist <- "Lap"
# localize g and G functions
if(dist=="Lap"){
g <- function(x,theta0=0){dlaplace(x,m=theta0,s=1)}
G <- function(x,theta0=0){plaplace(x,m=theta0,s=1)}
Ginv <- function(p){qlaplace(p)}
distname <- "Laplace(0,1)"
}
#--------------------------------------------------------------------------------------------------------------------#
# R functions
R1f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)-((1-alpha)/2)*(G(lambda-x)-G(-lambda-x)))))}
R2f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha - (1-w)/w*alpha*g(x)+alpha*(G(lambda-x)-G(-lambda-x)) + G(-lambda-x))))}
R3f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)+(alpha/2)*(G(lambda-x)-G(-lambda-x)))))}
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# codechunk for plotting
code.chunk <- function(lambda,alpha,w,distname,h=0.0001){
xgrid <- seq(0,15,h)
ranges <- c(0,10)
# get R
R1 <- R1f(xgrid,alpha,w,lambda)
R2 <- R2f(xgrid,alpha,w,lambda)
R3 <- R3f(xgrid,alpha,w,lambda)
plot(xgrid,xgrid,type="n",xlab="x",ylab="R",xlim=ranges,ylim=c(0,10))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
X1 <- xgrid[xgrid > lambda + R1]
X2 <- xgrid[(xgrid > 0) & (-lambda + R3 < xgrid) & (xgrid <= lambda + R1)  ]
X3 <- xgrid[abs(xgrid) <= -lambda + R3]
X4 <- -X2
X5 <- -X1
# exclude |x| <= t_alpha
ta <-max(0,xgrid[((w/(1-w))*(G(xgrid - lambda) + G(-xgrid - lambda))/g(xgrid)) <= (alpha/(1-alpha))])
if(ta==0){ # this is a manual trick, not exact
abline(v=c(min(X2),min(X1)),lty=3,col="darkgrey")
mtext(c("III","II","I"),side=1,adj=0.5,line=-1.5,at=c((max(X4)+min(X2))/2,(min(X2)+min(X1))/2,(min(X1)+max(ranges))/2))
}else{
abline(v=c(ta,min(X1)),lty=3,col="darkgrey")
mtext(c("-","II","I"),side=1,adj=0.5,line=-1.5,at=c((-ta+ta)/2,(ta+min(X1))/2,(min(X1)+max(ranges))/2))
mtext(c(expression(t[alpha])),side=1,at=c(ta),line=1)
}
lines(xgrid,R1,col="green",lty=2)
lines(xgrid,R2,col="red",lty=2)
lines(xgrid,R3,col="blue",lty=2)
# Active x in regime
lines(X1[abs(X1)>ta],R1f(X1[abs(X1)>ta],alpha,w,lambda),col="green",lty=1)
lines(X2[abs(X2)>ta],R2f(X2[abs(X2)>ta],alpha,w,lambda),col="red",lty=1)
lines(X3[abs(X3)>ta],R3f(X3[abs(X3)>ta],alpha,w,lambda),col="blue",lty=1)
}
png("Figures/figR.png",width=12,height=4.5,unit="in",res=300)
par(mfrow=c(1,3)) # this is a trick to get the size exactly the same as figLU
plot.new()
code.chunk(lambda=5,alpha=0.05,w=1,distname) # the actual figure
plot.new()
dev.off()
dev.off()
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab="freq. coverage",xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.002 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
png("Figures/figcov.png",width=12,height=9,units="in",res=300)
par(mfcol=c(2,3))
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="t3")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="t3")
dev.off()
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Feb 2020
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# source functions
library(rmutil) #dlaplace
#--------------------------------------------------------------------------------------------------------------------#
# Plots
#--------------------------------------------------------------------------------------------------------------------#
# Fig: Visualize R functions
dist <- "Lap"
# localize g and G functions
if(dist=="Lap"){
g <- function(x,theta0=0){dlaplace(x,m=theta0,s=1)}
G <- function(x,theta0=0){plaplace(x,m=theta0,s=1)}
Ginv <- function(p){qlaplace(p)}
distname <- "Laplace(0,1)"
}
#--------------------------------------------------------------------------------------------------------------------#
# R functions
R1f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)-((1-alpha)/2)*(G(lambda-x)-G(-lambda-x)))))}
R2f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha - (1-w)/w*alpha*g(x)+alpha*(G(lambda-x)-G(-lambda-x)) + G(-lambda-x))))}
R3f <- function(x,alpha,w,lambda){Ginv(pmax(0,pmin(1,1 - alpha/2 - (1-w)/(2*w)*alpha*g(x)+(alpha/2)*(G(lambda-x)-G(-lambda-x)))))}
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# codechunk for plotting
code.chunk <- function(lambda,alpha,w,distname,h=0.0001){
xgrid <- seq(0,15,h)
ranges <- c(0,10)
# get R
R1 <- R1f(xgrid,alpha,w,lambda)
R2 <- R2f(xgrid,alpha,w,lambda)
R3 <- R3f(xgrid,alpha,w,lambda)
plot(xgrid,xgrid,type="n",xlab="x",ylab="R",xlim=ranges,ylim=c(0,10))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
X1 <- xgrid[xgrid > lambda + R1]
X2 <- xgrid[(xgrid > 0) & (-lambda + R3 < xgrid) & (xgrid <= lambda + R1)  ]
X3 <- xgrid[abs(xgrid) <= -lambda + R3]
X4 <- -X2
X5 <- -X1
# exclude |x| <= t_alpha
ta <-max(0,xgrid[((w/(1-w))*(G(xgrid - lambda) + G(-xgrid - lambda))/g(xgrid)) <= (alpha/(1-alpha))])
if(ta==0){ # this is a manual trick, not exact
abline(v=c(min(X2),min(X1)),lty=3,col="darkgrey")
mtext(c("III","II","I"),side=1,adj=0.5,line=-1.5,at=c((max(X4)+min(X2))/2,(min(X2)+min(X1))/2,(min(X1)+max(ranges))/2))
}else{
abline(v=c(ta,min(X1)),lty=3,col="darkgrey")
mtext(c("-","II","I"),side=1,adj=0.5,line=-1.5,at=c((-ta+ta)/2,(ta+min(X1))/2,(min(X1)+max(ranges))/2))
mtext(c(expression(t[alpha])),side=1,at=c(ta),line=1)
}
lines(xgrid,R1,col="green",lty=2)
lines(xgrid,R2,col="red",lty=2)
lines(xgrid,R3,col="blue",lty=2)
# Active x in regime
lines(X1[abs(X1)>ta],R1f(X1[abs(X1)>ta],alpha,w,lambda),col="green",lty=1)
lines(X2[abs(X2)>ta],R2f(X2[abs(X2)>ta],alpha,w,lambda),col="red",lty=1)
lines(X3[abs(X3)>ta],R3f(X3[abs(X3)>ta],alpha,w,lambda),col="blue",lty=1)
}
#--------------------------------------------------------------------------------------------------------------------#
# Visualize R function
#pdf("Figures/figR.pdf",width=12,height=4.5)
png("Figures/figR.png",width=12,height=4.5,unit="in",res=300)
par(mfrow=c(1,3)) # this is a trick to get the size exactly the same as figLU
plot.new()
code.chunk(lambda=5,alpha=0.05,w=1,distname) # the actual figure
plot.new()
dev.off()
#--------------------------------------------------------------------------------------------------------------------#
w=1
alpha=0.05
lambda=5
h=0.0001
xgrid <- seq(0,15,h)
ranges <- c(0,10)
# get R
R1 <- R1f(xgrid,alpha,w,lambda)
R2 <- R2f(xgrid,alpha,w,lambda)
R3 <- R3f(xgrid,alpha,w,lambda)
plot(xgrid,xgrid,type="n",xlab="x",ylab="R",xlim=ranges,ylim=c(0,10))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
X1 <- xgrid[xgrid > lambda + R1]
X2 <- xgrid[(xgrid > 0) & (-lambda + R3 < xgrid) & (xgrid <= lambda + R1)  ]
X3 <- xgrid[abs(xgrid) <= -lambda + R3]
X4 <- -X2
X5 <- -X1
X3
# exclude |x| <= t_alpha
ta <-max(0,xgrid[((w/(1-w))*(G(xgrid - lambda) + G(-xgrid - lambda))/g(xgrid)) <= (alpha/(1-alpha))])
ta
abline(v=c(min(X2),min(X1)),lty=3,col="darkgrey")
mtext(c("III","II","I"),side=1,adj=0.5,line=-1.5,at=c((max(X4)+min(X2))/2,(min(X2)+min(X1))/2,(min(X1)+max(ranges))/2))
lines(xgrid,R1,col="green",lty=2)
y
plot(xgrid,xgrid,type="n",xlab="x",ylab="R",xlim=ranges,ylim=c(0,10))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", ",w==.(w))))
lines(xgrid,R1,col="green",lty=3)
points(xgrid,R1,col="green")
lines(xgrid,R2,col="red",lty=2)

dev.off()
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
# Visualize LU
pdf("Figures/figsize.pdf",width=12,height=4.5)
par(mfrow=c(1,3))
code.chunk(lambda=0.5,w=0.25,alpha,output="size") # left
code.chunk(lambda=5,w=0.25,alpha,output="size") # mid
code.chunk(lambda=5,w=1,alpha,output="size") # right
dev.off()
#------------------------------------------------------------------------------------------------------------------------#
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
?rlapalce
?rlaplace
rep(NULL,6)
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
#h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
h <- 0.01 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
obj
alpha=0.05
lambda=0.5
dist="Normal"
#h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
h <- 0.01 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
w=1
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
obj
if(dist=="Lap"){
g <- function(x){dlaplace(x,m=0,s=1)}
G <- function(x){plaplace(x,m=0,s=1)}
sampleg<-function(n){rlaplace(n,m=0,s=1)}
distname<-"Laplace(0,1)"
}
if(dist=="Normal"){
g <- function(x){dnorm(x,0,1)}
G <- function(x){pnorm(x,0,1)}
sampleg<-function(n){rnorm(n,0,1)}
distname<-"N(0,1)"
}
# generate thetas
thetaseq <- seq(lambda,thetamax,h)
## numeric proxy for frequentist coverage
C.num <-  numeric(length(thetaseq))
if(is.null(line.col)){col.tvec <- character(length(thetaseq))}else{col.tvec <- rep(line.col,length(thetaseq))}
line.col=NULL
if(is.null(line.col)){col.tvec <- character(length(thetaseq))}else{col.tvec <- rep(line.col,length(thetaseq))}
t=50
theta0 <- thetaseq[t]
theta0
#sample xgrid
xgrid <- sampleg(1e4)
Ugrid <- Lgrid <- numeric(length(xgrid))
regime <- numeric(length(xgrid))
for(i in 1:length(xgrid)){
x <- xgrid[i]
out.U <-getU(x,alpha,lambda,w,dist)
Ugrid[i] <- out.U$val
regime[i] <- out.U$regime
out.L <- getU(-x,alpha,lambda,w,dist)
Lgrid[i] <- -(out.L$val)
}
# Freq coverage P_{theta0}(theta0 in HPD)
Xcov <- xgrid[which(Ugrid >= theta0 & Lgrid <= theta0 )]
Xcov
C.num[t]<- sum(g(Xcov - theta0))/sum(g(xgrid-theta0))
C.num[t]
is.null(line.col)
reg.t <- regime[which(Ugrid >= theta0 & Lgrid <= theta0)]
reg.t
is.na(mean(reg.t)
)
col.tvec[t] <- "white"
rgb(red=sum(reg.t%in%c(2,4))/length(reg.t),green=sum(reg.t%in%c(1,5))/length(reg.t),blue=sum(reg.t==3)/length(reg.t),alpha=1)
col.tvec[t] <- rgb(red=sum(reg.t%in%c(2,4))/length(reg.t),green=sum(reg.t%in%c(1,5))/length(reg.t),blue=sum(reg.t==3)/length(reg.t),alpha=1)          }
col.tvec[t]
col.tvec[t] <- rgb(red=sum(reg.t%in%c(2,4))/length(reg.t),green=sum(reg.t%in%c(1,5))/length(reg.t),blue=sum(reg.t==3)/length(reg.t),alpha=1)          }
col.tvec[t] <- rgb(red=sum(reg.t%in%c(2,4))/length(reg.t),green=sum(reg.t%in%c(1,5))/length(reg.t),blue=sum(reg.t==3)/length(reg.t),alpha=1)
col.tvec[t]
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
#h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
h <- 0.01 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
#--------------------------------------
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h=0.1,dist="Normal")
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
#h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
h <- 0.01 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.005 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
#--------------------------------------------------------------------------------------------------------------------#
# Visualze panel
pdf("Figures/figcov.pdf",width=12,height=9)
par(mfcol=c(2,3))
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="t3")
#code.chunk(alpha=0.05,lambda=5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Normal")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=1,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="t3")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="t3")
dev.off()
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.005 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
#--------------------------------------------------------------------------------------------------------------------#
# Visualze panel
pdf("Figures/figcov.pdf",width=12,height=9)
par(mfcol=c(2,3))
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="t3")
#code.chunk(alpha=0.05,lambda=5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Normal")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=1,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="t3")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="t3")
dev.off()
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
#--------------------------------------------------------------------------------------------------------------------#
# Visualze panel
pdf("Figures/figcov.pdf",width=12,height=9)
par(mfcol=c(2,3))
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="t3")
#code.chunk(alpha=0.05,lambda=5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Normal")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=1,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
#--------------------------------------------------------------------------------------------------------------------#
# Visualze panel
pdf("Figures/figcov.pdf",width=12,height=9)
par(mfcol=c(2,3))
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="t3")
#code.chunk(alpha=0.05,lambda=5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Normal")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=1,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="t3")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="t3")
dev.off()
?png
source('~/surfdrive/Confidence (KD)/Git/functions/coverage.R')
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
#--------------------------------------------------------------------------------------------------------------------#
# Visualze panel
png("Figures/figcov.pdf",width=12,height=9)
par(mfcol=c(2,3))
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=0.25,thetamax,h,dist="t3")
#code.chunk(alpha=0.05,lambda=5,wseq=0.25,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Normal")
#code.chunk(alpha=0.05,lambda=5,wseq=1,thetamax,h,dist="Lap")
#code.chunk(alpha=0.05,lambda=0.5,wseq=1,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="Lap")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="t3")
code.chunk(alpha=0.05,lambda=5,wseq,thetamax,h,dist="t3")
dev.off()
#--------------------------------------------------------------------------------------------------------------------#
# On frequentist coverage of Bayesian credible sets for estimation of the mean under constraints
# Duisters & Schmidt-Hieber
# Math Institute, Leiden University
# Nov 2019
#--------------------------------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------------------------------#
# libraries
library(rmutil) #dlaplace
# source functions
source("functions/getU.R")
source("functions/coverage.R")
#--------------------------------------------------------------------------------------------------------------------#
# Code chunk for plotting multiple w's in one figure
code.chunk <- function(lambda,alpha,wseq,dist,thetamax,h){
thetaseq <- seq(lambda,thetamax,h) # same as inside coverage function
if(dist=="Lap"){distname <- "Laplace(0,1)"}
if(dist=="Normal"){distname <- "N(0,1)"}
if(dist=="t3"){distname <- "t(3)"}
if(dist=="t2"){distname <- "t(2)"}
if(dist=="t1"){distname <- "t(1)"}
if(dist=="Cauchy"){distname <- "Cauchy"}
yr <- c(1-5*alpha/2-0.005,1)
plot(thetaseq,thetaseq,type="n",ylim=range(yr),xlab=expression(theta[0]),ylab=expression(C(theta[0])),xlim=c(0,thetamax))
title(bquote(paste(.(distname),", ",lambda==.(lambda),", w = (",.(wseq[1]),", ",.(wseq[2]),", ",.(wseq[3]),", ",.(wseq[4]),")")))
abline(h=c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),lty=rep(3,4),col=rep("grey",4))
text(x=rep(max(thetaseq)-3,4),y=0.03*(max(yr)-min(yr))+c(1-alpha/2,1-alpha,1-3*alpha/2,1-2*alpha),labels=c(expression(1-alpha/2),expression(1-alpha),expression(1-3*alpha/2),expression(1-2*alpha)),cex=1,adj=0)
abline(v=lambda,lty=3,col="darkgrey")
text(expression(lambda),x=lambda+0.4,y=0.03*(max(yr)-min(yr))+ min(yr))
for(w in wseq){
obj <- coverage(alpha,lambda,w,dist,thetamax,h,plot.cov=F)
for(i in 2:length(thetaseq)){
segments(x0=thetaseq[i-1],x1=thetaseq[i],y0=obj$C.num[i-1],y1=obj$C.num[i],col=obj$colvec[i])
}
}
}
#--------------------------------------------------------------------------------------------------------------------#
# Universal parameters
h <- 0.001 # theta grid stepsize (change to 0.05 for speed when testing)
thetamax <- 15 # thetaseq endpoint
wseq <- c(0.125,0.25,0.5,1)
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h,dist="Normal")
code.chunk(alpha=0.05,lambda=0.5,wseq,thetamax,h=0.05,dist="Normal")
